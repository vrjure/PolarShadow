@inject IHttpFileResource _imageCache
@inject IHttpResource _httpRes;

<Card Bordered BodyStyle="padding:5px" Style="cursor:pointer;max-width:220px">
    <Cover>
        <img src="@_imageSrc" alt="img" style="max-height:290px" @onload="ImgLoad" />
    </Cover>
    <ChildContent>
        <div style="height:45px">
            <Text Strong Class="text-auto-hidden">@Summary.Name</Text>
        </div>
        <div>
            <Text Strong Style="float:right">@Summary.SiteName</Text>
        </div>
    </ChildContent>
</Card>

<style>
    .text-auto-hidden{
        display: -webkit-box;
        text-overflow: ellipsis;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
    }

</style>
@code {
    private string _imageSrc;

    [Parameter]
    public VideoSummary Summary{ get; set; }
    [Parameter]
    public bool UseCache { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (Summary != null)
        {
            if (UseCache)
            {
                _imageSrc = await _imageCache.CreateObjectUrlAsync(Summary.ImageSrc);
            }
            else
            {
                var uri = new Uri(Summary.ImageSrc);
                if (uri.Scheme.Equals(Uri.UriSchemeHttp))
                {
                    _imageSrc = await _httpRes.CreateObjectUrlAsync(Summary.ImageSrc);
                }
                else
                {
                    _imageSrc = Summary.ImageSrc;
                }
            }
        }
    }

    private async Task ImgLoad(ProgressEventArgs arg)
    {
        if (UseCache)
        {
            await _imageCache.RevokeObjectUrlAsync(_imageSrc);
        }
        else
        {
            var uri = new Uri(Summary.ImageSrc);
            if (uri.Scheme.Equals(Uri.UriSchemeHttp))
            {
                await _httpRes.RevokeObjectUrlAsync(_imageSrc);
            }
        }
    }
}
