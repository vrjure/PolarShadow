
<Input Placeholder="@Placeholder" Size="@InputSize.Small"
       @bind-Value="_searchText"
       BindOnInput="true"
       WrapperStyle="border-radius:15px"
       OnPressEnter="Search">
        <Prefix>
            <Icon Type="search" Theme="outline" />
        </Prefix>
        <Suffix>
                @if (hasContent)
                {
                <Icon Type="close" Theme="outline" OnClick="Clear" Class="cursor-point-style" />
                }
                else
                {
                <Icon Type="right" Theme="outline" Class="cursor-point-style"/>
                }
        </Suffix>
</Input>
@code {
    private string _searchText
    {
        get => SearchText;
        set => SearchTextChanged.InvokeAsync(value);
    }
    [Parameter]
    public string SearchText{ get; set; }
    [Parameter]
    public EventCallback<string> SearchTextChanged{ get; set; }
    [Parameter]
    public string Placeholder{ get; set; }

    [Parameter]
    public EventCallback<string> SearchHandler { get; set; }

    private bool hasContent => !string.IsNullOrEmpty(_searchText);

    private async Task Search()
    {
        await SearchHandler.InvokeAsync(this._searchText);
    }

    private void Clear()
    {
        _searchText = string.Empty;
    }

    private async Task TextChangedAsync(ChangeEventArgs e)
    {
        _searchText = e?.Value?.ToString();
        await SearchTextChanged.InvokeAsync(_searchText);
    }
}
