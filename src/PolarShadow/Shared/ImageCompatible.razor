@inject IHttpFileResource _imageCache
@inject IHttpResource _httpRes;

@if (!string.IsNullOrEmpty(Src))
{
    <img src="@_src" style="@Style" @onload="ImgLoad" />
}
else if (Placeholder != null)
{
    @Placeholder
}

@code {
    private string _src;

    [Parameter]
    public string Src{ get; set; }
    [Parameter]
    public bool UseCache { get; set; }
    [Parameter]
    public RenderFragment Placeholder{ get; set; }
    [Parameter]
    public string Style{ get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(Src))
        {
            if (UseCache)
            {
                _src = await _imageCache.CreateObjectUrlAsync(Src);
            }
            else
            {
                var uri = new Uri(Src);
                if (uri.Scheme.Equals(Uri.UriSchemeHttp))
                {
                    _src = await _httpRes.CreateObjectUrlAsync(Src);
                }
                else
                {
                    _src = Src;
                }
            }
        }
    }

    private async Task ImgLoad(ProgressEventArgs arg)
    {
        if (UseCache)
        {
            await _imageCache.RevokeObjectUrlAsync(Src);
        }
        else
        {
            var uri = new Uri(Src);
            if (uri.Scheme.Equals(Uri.UriSchemeHttp))
            {
                await _httpRes.RevokeObjectUrlAsync(_src);
            }
        }
    }
}
