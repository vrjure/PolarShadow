@page "/episode"
@layout TopLevelLayout
@inject IStateContext _context
@inject INavigationService _nav
@inject IMessageService _message;
@inject IPolarShadow _polarShadow;

<Layout>
    <Header>
        <Space Size="@("16")" Direction="DirectionVHType.Horizontal" Align="baseline">
            <SpaceItem>
                @if (_nav.CanBack())
                {
                    <Icon Type="left" Theme="outline" OnClick="()=>_nav.Back()" Class="cursor-point-style menu-icon" />
                }
            </SpaceItem>
            <SpaceItem>
                <Title Level="4">@_episode.Name</Title>
            </SpaceItem>
        </Space>
    </Header>
    <Content Class="scroll-content">
        <Space Size="@("16")" Direction="DirectionVHType.Vertical" Style="width:100%">
            @if (_episode != null && _episode.Sources != null)
            {
                foreach (var item in _episode.Sources)
                {
                    <SpaceItem>
                        <Button Type="@ButtonType.Default" Shape="@ButtonShape.Round" OnClick="()=>EpisodeLinkClick(item)" Style="width:100%">@item.SrcType.ToString()</Button>
                    </SpaceItem>
                }
            }
        </Space>

        <Drawer Visible="_drawerVisiable" OnClose="()=> _drawerVisiable = false">
            <Space Size="@("16")" Direction="DirectionVHType.Vertical" Style="width:100%">
                @if (_webAnalysisSource != null && _webAnalysisSource.Count > 0)
                {
                     foreach (var item in _webAnalysisSource)
                    {
                        <SpaceItem>
                            <Button Type="@ButtonType.Default" Shape="@ButtonShape.Round" OnClick="()=>WebAnalysisClick(item)">
                                @item.Title
                            </Button>
                        </SpaceItem>
                    }
                }
            </Space>
        </Drawer>
    </Content>
</Layout>

@code {
    public static readonly string EpisodeKey = "episode";
    public static readonly string VideoNameKey = "videoNameKey";
    public static readonly string SiteNameKey = "siteNameKey";
    private VideoEpisode _episode;
    private string _videoName;
    private string _siteName;
    private bool _drawerVisiable = false;
    private List<WebAnalysisSource> _webAnalysisSource;
    private VideoSource _selectVideoSource;

    protected override void OnInitialized()
    {
        if (_context.TryGet(EpisodeKey, out VideoEpisode episode))
        {
            _episode = episode;
        }

        if (_context.TryGet(VideoNameKey, out string nameVal))
        {
            _videoName = nameVal.ToString();
        }

        if (_context.TryGet(SiteNameKey, out string siteName))
        {
            _siteName = siteName;
        }
    }

    private async Task EpisodeLinkClick(VideoSource source)
    {
        try
        {
            _selectVideoSource = source;
            switch (source.SrcType)
            {
                case LinkType.HTML:
                    if (_webAnalysisSource == null)
                    {
                        _webAnalysisSource = new List<WebAnalysisSource>();
                        _webAnalysisSource.Add(new WebAnalysisSource
                        {
                            Name = "origin",
                            Title = "原地址",
                            Src = "{src}"
                        });
                        _webAnalysisSource.AddRange(_polarShadow.GetAnalysisSources());
                    }

                    _drawerVisiable = true;
                    break;
                case LinkType.Magnet:
                    if (string.IsNullOrEmpty(PreferenceSettings.Rpc) || string.IsNullOrEmpty(PreferenceSettings.DownloadPath))
                    {
                        _nav.NavigateTo("/mine", default, new Dictionary<string, object>
                        {
                            { VideoNameKey, _videoName},
                            { EpisodeKey, _episode}
                        }, true);
                        await _message.Info("请先设置Rpc地址和下载路径");
                        return;
                    }
                    using (var _aria2 = new Aria2Http(new Uri($"http://{PreferenceSettings.Rpc}/jsonrpc")))
                    {
                        var request = _aria2.CreateAddUri(new string[] { source.Src }, new Aria2InputFileOption
                            {
                                Dir = @$"{PreferenceSettings.DownloadPath}\{_videoName}"
                            });
                        var result = await _aria2.PostAsync(request);
                        if (result.IsOk())
                        {
                            await _message.Info($"{_videoName} Start");
                        }
                        else if (result.IsError())
                        {
                            await _message.Error(result.Error.Message);
                        }
                        else
                        {
                            await _message.Warning(result.Result);
                        }
                    }
                    break;
                default:
                    break;
            }
        }
        catch (Exception ex)
        {
            await _message.Error(ex.Message);
        }

    }

    private void WebAnalysisClick(WebAnalysisSource source)
    {
        var p = new KeyValueParameter();
        p.Add(_selectVideoSource);
        var url = source.Src.Format(p);
        _nav.NavigateTo(url, false, true);
    }
}
