@page "/source"
@layout MainLayout
@inject IPolarShadow _polarShadow;
@inject IMessageService _msg
@inject INavigationService _nav

<Layout>
    <Header>
        <GridRow Gutter="16" Align="middle" Class="header-content">
            <GridCol Flex=@("auto")>
                <SearchInput Placeholder="搜索" SearchHandler="Search" @bind-SearchText="_searchText" ClearHandler="SeachClear"/>
            </GridCol>
            <GridCol Flex=@("none")>
                <Dropdown Trigger="@(new Trigger[]{ Trigger.Click} )">
                    <Overlay>
                        <Menu OnMenuItemClicked="ItemClick" AutoCloseDropdown="true">
                            <MenuItem Id="import">导入</MenuItem>
                        </Menu>
                    </Overlay>
                    <ChildContent>
                        <Icon Type="more" Theme="outline" Class="menu-icon" />
                    </ChildContent>
                </Dropdown>
            </GridCol>
        </GridRow>
    </Header>
    <Content>
        <AntList TItem="ISite" DataSource="_source">
            <ListItem Class="list-item" OnClick="()=>SourceItemClick(context)">
                <span>@(context.Name)</span>
                <Icon Type="right" Theme="outline" Class="menu-icon" />

            </ListItem>
        </AntList>
    </Content>
</Layout>

<style>

</style>

@code {
    private ICollection<ISite> _source;
    private string _searchText;

    protected override void OnInitialized()
    {
        _source = _polarShadow.GetSites().ToList();
    }

    private void Search(string searchText)
    {
        if (string.IsNullOrEmpty(searchText))
        {
            _source = _polarShadow.GetSites().ToList();
        }
        else
        {
            _source = _polarShadow.GetSites().Where(f => f.Name.Contains(searchText) || f.Domain.Contains(searchText)).ToList();
        }
    }

    private void SeachClear()
    {
        _source = _polarShadow.GetSites().ToList();
    }

    private async Task ItemClick(MenuItem item)
    {
        try
        {
            if (item.Id == "import")
            {
                await Import();
                await _msg.Info("Success");
            }
        }
        catch (Exception ex)
        {
            await _msg.Error(ex.Message);
        }

    }

    private async Task Import()
    {
        try
        {
            var result = await FilePicker.Default.PickAsync(new PickOptions
            {
                FileTypes = new FilePickerFileType(new Dictionary<DevicePlatform, IEnumerable<string>>
                {
                { DevicePlatform.Android, new[] { "application/json" } }, // MIME type
                { DevicePlatform.WinUI, new[] { ".json", ".json" } }, // file extension
                })
            });

            using var stream = await result.OpenReadAsync();
            _polarShadow.Load(new JsonStreamSource(stream));
            _polarShadow.SaveToFile();
            _source = _polarShadow.GetSites().ToList();
        }
        catch (Exception ex)
        {
            await _msg.Error(ex.Message);
        }
    }

    private void SourceItemClick(ISite site)
    {
        _nav.NavigateTo("/source/detail", new Dictionary<string, object>
        {
            { SourceDetail.Site, site }
        }
        , true);
    }
}
