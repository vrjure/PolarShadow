@page "/search"
@layout TopLevelLayout
@inject NavigationManager _nav
@inject IPolarShadow _polarShadow

<Layout>
    <Header>
        <GridRow Gutter="16" Align="center" Class="header-content">
            <GridCol Flex=@("none")>
                <Icon Type="left" Theme="outline" OnClick="Back"/>
            </GridCol>
            <GridCol Flex=@("auto")>
                <SearchInput Placeholder="视频搜索" SearchHandler="SearchAsync"/>
            </GridCol>
            <GridCol Flex=@("none")>
                <Icon Type="more" Theme="outline" />
            </GridCol>
        </GridRow>
    </Header>
    <Content Class="scroll-content">
        @if(_source != null && _source.Count != 0)
        {
            <AntList TItem="VideoSummary" DataSource="_source" Grid="grid">
                <ChildContent>
                    <ListItem>
                        <VideoCard Summary="@(context)"/>
                    </ListItem>
                </ChildContent>
                <LoadMore>
                    @if (_source != null && _source.Count != 0 && _hasMore)
                    {
                        <Button Class="horizonal-cneter" Type="@ButtonType.Text" OnClick="LoadMoreAsync">加载更多</Button>
                    }
                </LoadMore>
            </AntList>
        }
        else
        {
            <Empty/>
        }
    </Content>
</Layout>
<style>
    .horizonal-cneter{
        left: 50%;
        transform:translate(50%,0);
    }
</style>
@code {

    private ICollection<VideoSummary> _source;

    private ISearcHandler _searcHandler;
    private bool _hasMore = true;
    private ListGridType grid = new ListGridType
    {
        Gutter = 16,
        Xs = 2,
        Sm = 2,
        Md = 4,
        Lg = 4,
        Xl = 6,
        Xxl = 8
    };

    private void Back(MouseEventArgs arg)
    {
        _nav.NavigateTo("/");
    }

    private async Task SearchAsync(string searchText)
    {
        if (string.IsNullOrEmpty(searchText))
        {
            _hasMore = false;
            _source?.Clear();
            return;
        }
        _searcHandler = _polarShadow.BuildSearchHandler(new SearchVideoFilter
        {
            Page = 1,
            PageSize = 10,
            SearchKey = searchText
        });

        var result = await _searcHandler.SearchNextAsync();
        if (result == null)
        {
            _hasMore = false;
            _source?.Clear();
            return;
        }
        _hasMore = true;
        _source = new List<VideoSummary>(result);    
    }

    private async Task LoadMoreAsync()
    {
        if (_searcHandler == null)
        {
            return;
        }

        var result = await _searcHandler.SearchNextAsync();
        if (result == null || result.Count == 0)
        {
            _hasMore = false;
            return;
        }
        (_source as List<VideoSummary>).AddRange(result);
    }

}
