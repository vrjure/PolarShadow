@page "/search"
@layout TopLevelLayout
@inject INavigationService _nav
@inject IPolarShadow _polarShadow
@inject IStateContext _stateContext;

<Layout>
    <Header>
        <GridRow Gutter="16" Align="center" Class="header-content">
            <GridCol Flex=@("none")>
                @if (_nav.CanBack())
                {
                    <Icon Type="left" Theme="outline" OnClick="Back" Class="cursor-point-style menu-icon" />
                }
            </GridCol>
            <GridCol Flex=@("auto")>
                <SearchInput Placeholder="视频搜索" SearchHandler="SearchAsync" @bind-SearchText="@_searchText"/>
            </GridCol>
            <GridCol Flex=@("none")>
                <Icon Type="more" Theme="outline" Class="menu-icon" />
            </GridCol>
        </GridRow>
    </Header>
    <Content Class="scroll-content">
        @if (_isLoading)
        {
            <Spin Class="horizonal-cneter"/>
        }
        else if(_source != null && _source.Count != 0)
        {
            <AntList TItem="VideoSummary" DataSource="_source" Grid="grid">
                <ChildContent>
                    <ListItem OnClick="()=>ItemClick(context)">
                        <VideoCard Summary="@(context)"/>
                    </ListItem>
                </ChildContent>
                <LoadMore>
                    @if (_isMoreLoading)
                    {
                        <Spin Class="horizonal-cneter"/>
                    }
                    else if (_source != null && _source.Count != 0 && _hasMore)
                    {
                        <Button Class="horizonal-cneter" Type="@ButtonType.Text" OnClick="LoadMoreAsync">加载更多</Button>
                    }
                </LoadMore>
            </AntList>
        }
        else
        {
            <Empty/>
        }
    </Content>
</Layout>

@code {

    private ICollection<VideoSummary> _source;
    private string _searchText;
    private ISearcHandler _searcHandler;
    private bool _hasMore = true;
    private ListGridType grid = new ListGridType
    {
        Gutter = 16,
        Xs = 2,
        Sm = 2,
        Md = 4,
        Lg = 4,
        Xl = 6,
        Xxl = 8
    };

    public static string _lastResultKey = "last_search_result";
    public static string _lastSearchTextKey = "last_search_text";

    private bool _isLoading = false;
    private bool _isMoreLoading = false;

    protected override void OnInitialized()
    {
        if (_stateContext.TryGet(_lastSearchTextKey, out object searchText))
        {
            _searchText = searchText?.ToString();
        }
        if (_stateContext.TryGet(_lastResultKey, out object val))
        {
            _source = val as ICollection<VideoSummary>;
            _hasMore = false;
        }
    }

    private void Back(MouseEventArgs arg)
    {
        _nav.Back();
    }

    private async Task SearchAsync(string searchText)
    {
        if (string.IsNullOrEmpty(searchText))
        {
            _hasMore = false;
            _source?.Clear();
            return;
        }
        _searcHandler = _polarShadow.BuildSearchHandler(new SearchVideoFilter
        {
            Page = 1,
            PageSize = 10,
            SearchKey = searchText
        });

        _isLoading = true;

        try
        {
            var result = await _searcHandler.SearchNextAsync();
            if (result == null)
            {
                _hasMore = false;
                _source?.Clear();
                return;
            }
            _hasMore = true;
            _source = new List<VideoSummary>(result);
        }
        finally
        {
            _isLoading = false;
        }

    }

    private async Task LoadMoreAsync()
    {
        if (_searcHandler == null)
        {
            return;
        }

        _isMoreLoading = true;
        try
        {
            var result = await _searcHandler.SearchNextAsync();
            if (result == null || result.Count == 0)
            {
                _hasMore = false;
                return;
            }
            (_source as List<VideoSummary>).AddRange(result);
        }
        finally
        {
            _isMoreLoading = false;
        }

    }

    private void ItemClick(VideoSummary summary)
    {
        _nav.NavigateTo("/detail", new Dictionary<string, object>
        {
            { DetailPage._summaryKey, summary}
        }, new Dictionary<string, object>
        {
            { _lastSearchTextKey, _searchText},
            { _lastResultKey, _source }
        }, true);
    }

}
